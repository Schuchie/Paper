From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <Blake.Galbreath@GMail.com>
Date: Fri, 27 Jul 2018 22:36:31 -0500
Subject: [PATCH] SkeletonHorse Additions


diff --git a/src/main/java/net/minecraft/server/EntityHorseSkeleton.java b/src/main/java/net/minecraft/server/EntityHorseSkeleton.java
index bb23e313b236ceb81c60d62833dc6f5afee044eb..a53d335f3af9df80bec3f94f81fb5ff0e0e5ebb5 100644
--- a/src/main/java/net/minecraft/server/EntityHorseSkeleton.java
+++ b/src/main/java/net/minecraft/server/EntityHorseSkeleton.java
@@ -6,7 +6,7 @@ public class EntityHorseSkeleton extends EntityHorseAbstract {
 
     private final PathfinderGoalHorseTrap bw = new PathfinderGoalHorseTrap(this);
     private boolean bx;
-    private int by;
+    private int by; public int getTrapTime() { return this.by; } // Paper - OBFHELPER
 
     public EntityHorseSkeleton(EntityTypes<? extends EntityHorseSkeleton> entitytypes, World world) {
         super(entitytypes, world);
@@ -125,10 +125,12 @@ public class EntityHorseSkeleton extends EntityHorseAbstract {
         return 0.96F;
     }
 
+    public boolean isTrap() { return this.eM(); } // Paper - OBFHELPER
     public boolean eM() {
         return this.bx;
     }
 
+    public void setTrap(boolean trap) { this.t(trap); } // Paper - OBFHELPER
     public void t(boolean flag) {
         if (flag != this.bx) {
             this.bx = flag;
diff --git a/src/main/java/net/minecraft/server/IEntityAccess.java b/src/main/java/net/minecraft/server/IEntityAccess.java
index 14400d0e4b0713e852861ed55e289e4dead95cea..90c94729edf8d18f33d72e872f7969abef0067a0 100644
--- a/src/main/java/net/minecraft/server/IEntityAccess.java
+++ b/src/main/java/net/minecraft/server/IEntityAccess.java
@@ -1,6 +1,9 @@
 package net.minecraft.server;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
+import org.bukkit.entity.HumanEntity;
+
 import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
@@ -106,6 +109,28 @@ public interface IEntityAccess {
         return entityhuman;
     }
 
+    // Paper start
+    default List<HumanEntity> findNearbyBukkitPlayers(double x, double y, double z, double radius, boolean notSpectator) {
+        return findNearbyBukkitPlayers(x, y, z, radius, notSpectator ? IEntitySelector.notSpectator() : IEntitySelector.canAITarget());
+    }
+
+    default List<HumanEntity> findNearbyBukkitPlayers(double x, double y, double z, double radius, @Nullable Predicate<Entity> predicate) {
+        ImmutableList.Builder<HumanEntity> builder = ImmutableList.builder();
+
+        for (EntityHuman human : this.getPlayers()) {
+            if (predicate == null || predicate.test(human)) {
+                double distanceSquared = human.getDistanceSquared(x, y, z);
+
+                if (radius < 0.0D || distanceSquared < radius * radius) {
+                    builder.add(human.getBukkitEntity());
+                }
+            }
+        }
+
+        return builder.build();
+    }
+    // Paper end
+
     @Nullable
     default EntityHuman findNearbyPlayer(Entity entity, double d0) {
         return this.a(entity.locX(), entity.locY(), entity.locZ(), d0, false);
diff --git a/src/main/java/net/minecraft/server/IEntitySelector.java b/src/main/java/net/minecraft/server/IEntitySelector.java
index ff1ddb4db5406f81453a8f075033d00e06bce6a5..863f4464c688912b3e0ce61cbbbf263e38a3af4b 100644
--- a/src/main/java/net/minecraft/server/IEntitySelector.java
+++ b/src/main/java/net/minecraft/server/IEntitySelector.java
@@ -20,6 +20,7 @@ public final class IEntitySelector {
     public static final Predicate<Entity> f = (entity) -> {
         return !(entity instanceof EntityHuman) || !entity.isSpectator() && !((EntityHuman) entity).isCreative() && entity.world.getDifficulty() != EnumDifficulty.PEACEFUL;
     };
+    public static Predicate<Entity> notSpectator() { return g; } // Paper - OBFHELPER
     public static final Predicate<Entity> g = (entity) -> {
         return !entity.isSpectator();
     };
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java b/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java
index 8433a1a9a7de6a705a7fbecb593742ffa2e544f0..b0d1abeda19423d8adf0ff596442b00ac2e53357 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java
@@ -1,8 +1,13 @@
 package net.minecraft.server;
 
+import org.bukkit.entity.HumanEntity;
+
+import java.util.List;
+
 public class PathfinderGoalHorseTrap extends PathfinderGoal {
 
     private final EntityHorseSkeleton a;
+    private List<HumanEntity> eligiblePlayers; // Paper
 
     public PathfinderGoalHorseTrap(EntityHorseSkeleton entityhorseskeleton) {
         this.a = entityhorseskeleton;
@@ -10,12 +15,13 @@ public class PathfinderGoalHorseTrap extends PathfinderGoal {
 
     @Override
     public boolean a() {
-        return this.a.world.isPlayerNearby(this.a.locX(), this.a.locY(), this.a.locZ(), 10.0D);
+        return !(eligiblePlayers = this.a.world.findNearbyBukkitPlayers(this.a.locX(), this.a.locY(), this.a.locZ(), 10.0D, false)).isEmpty(); // Paper
     }
 
     @Override
     public void e() {
         WorldServer worldserver = (WorldServer) this.a.world;
+        if (!new com.destroystokyo.paper.event.entity.SkeletonHorseTrapEvent((org.bukkit.entity.SkeletonHorse) this.a.getBukkitEntity(), eligiblePlayers).callEvent()) return; // Paper
         DifficultyDamageScaler difficultydamagescaler = worldserver.getDamageScaler(this.a.getChunkCoordinates());
 
         this.a.t(false);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
index e822c2200d6270ca538eadd9637b748fc3602cb6..2a7d1d4ec2c1ff16840614165c6f0c37dc534d87 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
@@ -26,4 +26,26 @@ public class CraftSkeletonHorse extends CraftAbstractHorse implements SkeletonHo
     public Variant getVariant() {
         return Variant.SKELETON_HORSE;
     }
+
+    // Paper start
+    @Override
+    public EntityHorseSkeleton getHandle() {
+        return (EntityHorseSkeleton) super.getHandle();
+    }
+
+    @Override
+    public int getTrapTime() {
+        return getHandle().getTrapTime();
+    }
+
+    @Override
+    public boolean isTrap() {
+        return getHandle().isTrap();
+    }
+
+    @Override
+    public void setTrap(boolean trap) {
+        getHandle().setTrap(trap);
+    }
+    // Paper end
 }
