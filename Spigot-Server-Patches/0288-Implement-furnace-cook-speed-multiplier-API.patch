From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tassu <git@tassu.me>
Date: Thu, 13 Sep 2018 08:45:21 +0300
Subject: [PATCH] Implement furnace cook speed multiplier API

Signed-off-by: Tassu <git@tassu.me>

Fixed an issue where a furnace's cook-speed multiplier rounds down
to the nearest Integer when updating its current cook time.

Modified by: Eric Su <ericsu@alumni.usc.edu>

diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 99b20fa5feff0f766124d4ec9474852e33e329f2..51db9ea42d49c4c21f30cfeba25e09bce2dcbcbe 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -10,6 +10,7 @@ import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
 // CraftBukkit start
+import java.util.List;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -28,6 +29,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
     protected NonNullList<ItemStack> items;
     public int burnTime;
     private int ticksForCurrentFuel;
+    public double cookSpeedMultiplier = 1.0; // Paper - cook speed multiplier API
     public int cookTime;
     public int cookTimeTotal;
     protected final IContainerProperties b;
@@ -228,6 +230,11 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
             this.n.put(new MinecraftKey(s), nbttagcompound1.getInt(s));
         }
 
+        // Paper start - cook speed API
+        if (nbttagcompound.hasKey("Paper.CookSpeedMultiplier")) {
+            this.cookSpeedMultiplier = nbttagcompound.getDouble("Paper.CookSpeedMultiplier");
+        }
+        // Paper end
     }
 
     @Override
@@ -236,6 +243,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
         nbttagcompound.setShort("BurnTime", (short) this.burnTime);
         nbttagcompound.setShort("CookTime", (short) this.cookTime);
         nbttagcompound.setShort("CookTimeTotal", (short) this.cookTimeTotal);
+        nbttagcompound.setDouble("Paper.CookSpeedMultiplier", this.cookSpeedMultiplier); // Paper - cook speed multiplier API
         ContainerUtil.a(nbttagcompound, this.items);
         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
@@ -296,7 +304,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
 
                 if (this.isBurning() && this.canBurn(irecipe)) {
                     ++this.cookTime;
-                    if (this.cookTime == this.cookTimeTotal) {
+                    if (this.cookTime >= this.cookTimeTotal) { // Paper - cook speed multiplier API
                         this.cookTime = 0;
                         this.cookTimeTotal = this.getRecipeCookingTime();
                         this.burn(irecipe);
@@ -396,9 +404,13 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
         }
     }
 
-    protected int getRecipeCookingTime() {
-        return (this.hasWorld()) ? (Integer) this.world.getCraftingManager().craft((Recipes<RecipeCooking>) this.c, this, this.world).map(RecipeCooking::getCookingTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail
+    // Paper begin - Expose this function so CraftFurnace can correctly scale the total cooking time to a new multiplier
+    public int getRecipeCookingTime() {
+        /* Scale the recipe's cooking time to the current cookSpeedMultiplier */
+        int cookTime = (this.hasWorld()) ? (Integer) this.world.getCraftingManager().craft((Recipes<RecipeCooking>) this.c, this, this.world).map(RecipeCooking::getCookingTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail
+        return (int) Math.ceil (cookTime / this.cookSpeedMultiplier);
     }
+    // Paper end
 
     public static boolean isFuel(ItemStack itemstack) {
         return f().containsKey(itemstack.getItem());
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
index e0e10feeb1608c46effd6104f64db50977f468fe..693511650a7fa39c7c4eeca50cdf50f4a6f58538 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
@@ -63,4 +63,20 @@ public abstract class CraftFurnace<T extends TileEntityFurnace> extends CraftCon
     public void setCookTimeTotal(int cookTimeTotal) {
         this.getSnapshot().cookTimeTotal = cookTimeTotal;
     }
+
+    // Paper start - cook speed multiplier API
+    @Override
+    public double getCookSpeedMultiplier() {
+        return this.getSnapshot().cookSpeedMultiplier;
+    }
+
+    @Override
+    public void setCookSpeedMultiplier(double multiplier) {
+        com.google.common.base.Preconditions.checkArgument(multiplier >= 0, "Furnace speed multiplier cannot be negative");
+        com.google.common.base.Preconditions.checkArgument(multiplier <= 200, "Furnace speed multiplier cannot more than 200");
+        T snapshot = this.getSnapshot();
+        snapshot.cookSpeedMultiplier = multiplier;
+        snapshot.cookTimeTotal = snapshot.getRecipeCookingTime(); // Update the snapshot's current total cook time to scale with the newly set multiplier
+    }
+    // Paper end
 }
